/**
 *
 * This file was generated by Aldebaran Robotics ModuleGenerator
 */

#ifndef ONREDBALLDETECTION_H
#define ONREDBALLDETECTION_H

#include <boost/shared_ptr.hpp>
#include <alcommon/almodule.h>
#include <string>

#include <alproxies/almemoryproxy.h>
#include <alproxies/alredballtrackerproxy.h>
#include <alproxies/altexttospeechproxy.h>
#include <alproxies/almotionproxy.h>

#include <althread/almutex.h>

namespace AL
{
  class ALBroker;
}

class OnRedBallDetection : public AL::ALModule
{
  public:

    OnRedBallDetection(boost::shared_ptr<AL::ALBroker> broker, const std::string& name);

    virtual ~OnRedBallDetection();

    virtual void init();

    //void check_position();

    //void moveToward(float x, float y);

    //void turn(float angle);

    //void stop();

    void reachBall();
    bool walkToTarget(float, float);
    //void turn(float);
    void wbKick(std::string);
    void poseInit();
    void stopMovement();

  private:
    /** Memory proxy for event subscription and data access. */
    AL::ALMemoryProxy fMemoryProxy;

    AL::ALRedBallTrackerProxy ballProxy;
    AL::ALMotionProxy motionProxy;

    /** Mutex to make the callback function thread-safe. */
    boost::shared_ptr<AL::ALMutex> fCallbackMutex;

    int ballCounter;


};

#endif
